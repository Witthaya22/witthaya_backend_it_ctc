// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstName    String   @db.VarChar(64)
  lastName     String   @db.VarChar(64)
  password     String   @db.VarChar(256)
  image        String?  @db.VarChar(256)
  departmentId String   @db.VarChar(64)
  role         String   @default("USER") @db.VarChar(20)
  isArchived   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department      Department        @relation(fields: [departmentId], references: [id])
  admin           Admin?
  activityResults ActivityResults[]
  activityDetails ActivityDetails[]
  oauth           Oauth[]

  @@map("users")
}

model Oauth {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String   @db.VarChar(2048)
  refreshToken String   @db.VarChar(2048)
  isArchived   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("oauths")
}

model Department {
  id         String   @id @default(uuid()) @map("department_id")
  name       String   @db.VarChar(64)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  users           User[]
  activityResults ActivityResults[]

  @@map("departments")
}

model Admin {
  id         String   @id @default(uuid())
  password   String   @db.VarChar(256)
  userId     String   @unique
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Activity {
  id              String   @id @default(uuid())
  title           String
  description     String   @db.Text
  startDate       DateTime
  endDate         DateTime
  type            String   @db.VarChar(20)
  location        String?  @db.VarChar(256)
  maxParticipants Int?
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  activityResults ActivityResults[]
  activityDetails ActivityDetails[]

  @@map("activities")
}

model ActivityResults {
  id           String   @id @default(uuid())
  departmentId String
  userId       String
  activityId   String
  reservation  Boolean
  status       String   @db.VarChar(20)
  isArchived   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  activity   Activity   @relation(fields: [activityId], references: [id])

  @@map("activity_results")
}

model ActivityDetails {
  id         String   @id @default(uuid())
  userId     String
  activityId String
  details    String   @db.Text
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])

  @@map("activity_details")
}
