// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID        String    @id @default(cuid()) @unique
  UserFirstName String    @db.VarChar(64)
  UserLastName  String    @db.VarChar(64)
  UserPassword  String    @db.VarChar(256)
  UserImage     String?   @db.VarChar(256)
  DepartmentID  String    @db.VarChar(64)
  Role          String    @default("USER") @db.VarChar(20)
  IsArchived    Boolean   @default(false)
  CreatedAt     DateTime  @default(now())
  UpdatedAt     DateTime  @updatedAt

  // Relations
  Department       Department        @relation(fields: [DepartmentID], references: [DepartmentID])
  Admin            Admin?
  ActivityResults  ActivityResults[]
  ActivityDetails  ActivityDetails[]
  Oauth            Oauth[]

  @@map("users")
}

model Oauth {
  ID           String   @id @default(cuid())
  UserID       String   @db.VarChar(64)
  AccessToken  String   @db.VarChar(2048)
  RefreshToken String   @db.VarChar(2048)
  IsArchived   Boolean  @default(false)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // Relations
  User         User     @relation(fields: [UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)

  @@map("oauths")
}

model Department {
  DepartmentID String    @id @default(cuid()) @map("department_id")
  Name         String    @db.VarChar(64)
  IsArchived   Boolean   @default(false)
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime  @updatedAt

  // Relations
  Users            User[]
  ActivityResults  ActivityResults[]

  @@map("departments")
}

model Admin {
  AdminID    String   @id @default(cuid())
  AdminPass  String   @db.VarChar(256)
  UserID     String   @unique @db.VarChar(64)
  IsArchived Boolean  @default(false)
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt

  // Relations
  User       User     @relation(fields: [UserID], references: [UserID])

  @@map("admins")
}

model Activity {
  ID           String   @id @default(cuid())
  Title        String
  Description  String   @db.Text
  StartDate    DateTime
  EndDate      DateTime
  Type         String   @db.VarChar(20)
  Location     String?  @db.VarChar(256)
  MaxParticipants Int?
  IsArchived   Boolean  @default(false)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // Relations
  ActivityResults  ActivityResults[]
  ActivityDetails  ActivityDetails[]

  @@map("activities")
}

model ActivityResults {
  ID           Int      @id @default(autoincrement())
  DepartmentID String
  UserID       String
  ActivityID   String
  Reservation   Boolean
  Status       String   @db.VarChar(20)
  IsArchived   Boolean  @default(false)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // Relations
  Department   Department @relation(fields: [DepartmentID], references: [DepartmentID])
  User         User       @relation(fields: [UserID], references: [UserID])
  Activity     Activity   @relation(fields: [ActivityID], references: [ID])

  @@map("activity_results")
}

model ActivityDetails {
  ID           Int      @id @default(autoincrement())
  UserID       String
  ActivityID   String
  Details      String   @db.Text
  IsArchived   Boolean  @default(false)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // Relations
  User         User     @relation(fields: [UserID], references: [UserID]) // แก้ไขให้เป็น UserID
  Activity     Activity @relation(fields: [ActivityID], references: [ID]) // แก้ไขให้เป็น ActivityID

  @@map("activity_details")
}
